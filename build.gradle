buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.3'
        classpath 'org.gretty:gretty:2.2.0'
    }
}

apply plugin: 'java'
apply plugin: 'org.junit.platform.gradle.plugin'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'org.cafebabepy'
version = '1-1-3.6.2'

project.ext {
    artifactId = 'cafebabepy-wsgi'
    defaultEncoding = 'UTF-8'
}

apply plugin: 'maven-publish'

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

apply plugin: 'org.gretty'

gretty {
    httpPort = 8765
    contextPath = '/'
    integrationTestTask = "test"
    classPath = [
            "${buildDir}/classes/java/main",
            "${buildDir}/classes/java/test",
            "${buildDir}/resources/main",
            "${buildDir}/resources/test"
    ]
}

ext.versions = [
        gradle: '4.7'
]

ext.python = [
        sourceDir    : 'src/main/python',
        testSourceDir: 'src/test/python'
]

configurations {
    providedCompile
}

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
}

sourceSets.main.resources.srcDirs = [python.sourceDir] + sourceSets.main.resources.srcDirs
sourceSets.test.resources.srcDirs = [python.testSourceDir] + sourceSets.test.resources.srcDirs

dependencies {
    compile group: 'org.cafebabepy', name: 'cafebabepy', version: '1-3.6.2'

    providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'

    testCompile group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.27'
    testCompile group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: '2.27'
    testCompile group: 'javax.activation', name: 'activation', version: '1.1.1'

    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.0.2'
    testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.0.2'
}

tasks.withType(JavaCompile) {
    options.encoding = defaultEncoding
    options.compilerArgs << '-parameters'
}

task wrapper(type: Wrapper) {
    gradleVersion << versions.gradle
}

junitPlatformTest.doFirst {
    appBeforeIntegrationTest
}

junitPlatformTest.finalizedBy 'appAfterIntegrationTest'
